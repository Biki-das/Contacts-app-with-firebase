{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIKI PC\\\\Downloads\\\\attachment_01_A_challenge_application_lyst4695\\\\src\\\\pages\\\\AddContact.js\";\n// https://firebase.google.com/docs/storage/web/upload-files#full_example\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\nimport React, { useState, useContext, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\nimport { Container, Form, FormGroup, Label, Input, Button, Spinner, Row, Col } from \"reactstrap\"; // to compress image before uploading to the server\n\nimport { readAndCompressImage } from \"browser-image-resizer\"; // configs for image resizing\n//TODO: add image configurations\n\nimport { MdAddCircleOutline } from \"react-icons/md\";\nimport { v4 } from \"uuid\"; // context stuffs\n\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\nimport { useHistory } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\n\nconst AddContact = () => {\n  // destructuring state and dispatch from context state\n  const {\n    state,\n    dispatch\n  } = useContext(ContactContext);\n  const {\n    contactToUpdate,\n    contactToUpdateKey\n  } = state; // history hooks from react router dom to send to different page\n\n  const history = useHistory(); // simple state of all component\n\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [star, setStar] = useState(false);\n  const [isUpdate, setIsUpdate] = useState(false); // when their is the contact to update in the Context state\n  // then setting state with the value of the contact\n  // will changes only when the contact to update changes\n\n  useEffect(() => {\n    if (contactToUpdate) {\n      setName(contactToUpdate.name);\n      setEmail(contactToUpdate.email);\n      setPhoneNumber(contactToUpdate.phoneNumber);\n      setAddress(contactToUpdate.address);\n      setStar(contactToUpdate.star);\n      setDownloadUrl(contactToUpdate.picture); // also setting is update to true to make the update action instead the addContact action\n\n      setIsUpdate(true);\n    }\n  }, [contactToUpdate]); // To upload image to firebase and then set the the image link in the state of the app\n\n  const imagePicker = async e => {// TODO: upload image and set D-URL to state\n  }; // setting contact to firebase DB\n\n\n  const addContact = async () => {//TODO: add contact method\n  }; // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n\n\n  const updateContact = async () => {//TODO: update contact method\n  }; // firing when the user click on submit button or the form has been submitted\n\n\n  const handleSubmit = e => {\n    e.preventDefault(); // isUpdate wll be true when the user came to update the contact\n    // when their is contact then updating and when no contact to update then adding contact\n    //TODO: set isUpdate value\n    // to handle the bug when the user visit again to add contact directly by visiting the link\n\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null\n    }); // after adding/updating contact then sending to the contacts\n    // TODO :- also sending when their is any errors\n\n    history.push(\"/\");\n  }; // return the spinner when the image has been added in the storage\n  // showing the update / add contact based on the  state\n\n\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    className: \"mt-5\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    md: \"6\",\n    className: \"offset-md-3 p-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"text-center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  }, isUploading ? /*#__PURE__*/React.createElement(Spinner, {\n    type: \"grow\",\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 17\n    }\n  }) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    htmlFor: \"imagepicker\",\n    className: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: downloadUrl,\n    alt: \"\",\n    className: \"profile\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 21\n    }\n  })), /*#__PURE__*/React.createElement(\"input\", {\n    type: \"file\",\n    name: \"image\",\n    id: \"imagepicker\",\n    accept: \"image/*\",\n    multiple: false,\n    onChange: e => imagePicker(e),\n    className: \"hidden\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 19\n    }\n  }))), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    name: \"name\",\n    id: \"name\",\n    placeholder: \"Name\",\n    value: name,\n    onChange: e => setName(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"email\",\n    name: \"email\",\n    id: \"email\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    placeholder: \"Email\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    name: \"number\",\n    id: \"phonenumber\",\n    value: phoneNumber,\n    onChange: e => setPhoneNumber(e.target.value),\n    placeholder: \"phone number\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"textarea\",\n    name: \"area\",\n    id: \"area\",\n    value: address,\n    onChange: e => setAddress(e.target.value),\n    placeholder: \"address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(FormGroup, {\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Label, {\n    check: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"checkbox\",\n    onChange: () => {\n      setStar(!star);\n    },\n    checked: star,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 17\n    }\n  }), \" \", /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 17\n    }\n  }, \"Mark as Star\"))), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    block: true,\n    className: \"text-uppercase\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 13\n    }\n  }, isUpdate ? \"Update Contact\" : \"Add Contact\")))));\n};\n\nexport default AddContact;","map":{"version":3,"sources":["C:/Users/BIKI PC/Downloads/attachment_01_A_challenge_application_lyst4695/src/pages/AddContact.js"],"names":["React","useState","useContext","useEffect","firebase","Container","Form","FormGroup","Label","Input","Button","Spinner","Row","Col","readAndCompressImage","MdAddCircleOutline","v4","ContactContext","CONTACT_TO_UPDATE","useHistory","toast","AddContact","state","dispatch","contactToUpdate","contactToUpdateKey","history","name","setName","email","setEmail","phoneNumber","setPhoneNumber","address","setAddress","isUploading","setIsUploading","downloadUrl","setDownloadUrl","star","setStar","isUpdate","setIsUpdate","picture","imagePicker","e","addContact","updateContact","handleSubmit","preventDefault","type","payload","key","push","target","value"],"mappings":"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","sourcesContent":["// https://firebase.google.com/docs/storage/web/upload-files#full_example\n// https://www.npmjs.com/package/browser-image-resizer#asyncawait\n\nimport React, { useState, useContext, useEffect } from \"react\";\nimport firebase from \"firebase/app\";\n\nimport {\n  Container,\n  Form,\n  FormGroup,\n  Label,\n  Input,\n  Button,\n  Spinner,\n  Row,\n  Col\n} from \"reactstrap\";\n\n// to compress image before uploading to the server\nimport { readAndCompressImage } from \"browser-image-resizer\";\n\n// configs for image resizing\n//TODO: add image configurations\n\nimport { MdAddCircleOutline } from \"react-icons/md\";\n\nimport { v4 } from \"uuid\";\n\n// context stuffs\nimport { ContactContext } from \"../context/Context\";\nimport { CONTACT_TO_UPDATE } from \"../context/action.types\";\n\nimport { useHistory } from \"react-router-dom\";\n\nimport { toast } from \"react-toastify\";\n\nconst AddContact = () => {\n  // destructuring state and dispatch from context state\n  const { state, dispatch } = useContext(ContactContext);\n\n  const { contactToUpdate, contactToUpdateKey } = state;\n\n  // history hooks from react router dom to send to different page\n  const history = useHistory();\n\n  // simple state of all component\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phoneNumber, setPhoneNumber] = useState(\"\");\n  const [address, setAddress] = useState(\"\");\n  const [isUploading, setIsUploading] = useState(false);\n  const [downloadUrl, setDownloadUrl] = useState(null);\n  const [star, setStar] = useState(false);\n  const [isUpdate, setIsUpdate] = useState(false);\n\n  // when their is the contact to update in the Context state\n  // then setting state with the value of the contact\n  // will changes only when the contact to update changes\n  useEffect(() => {\n    if (contactToUpdate) {\n      setName(contactToUpdate.name);\n      setEmail(contactToUpdate.email);\n      setPhoneNumber(contactToUpdate.phoneNumber);\n      setAddress(contactToUpdate.address);\n      setStar(contactToUpdate.star);\n      setDownloadUrl(contactToUpdate.picture);\n\n      // also setting is update to true to make the update action instead the addContact action\n      setIsUpdate(true);\n    }\n  }, [contactToUpdate]);\n\n  // To upload image to firebase and then set the the image link in the state of the app\n  const imagePicker = async e => {\n    // TODO: upload image and set D-URL to state\n  };\n\n  // setting contact to firebase DB\n  const addContact = async () => {\n    //TODO: add contact method\n  };\n\n  // to handle update the contact when there is contact in state and the user had came from clicking the contact update icon\n  const updateContact = async () => {\n    //TODO: update contact method\n  };\n\n  // firing when the user click on submit button or the form has been submitted\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // isUpdate wll be true when the user came to update the contact\n    // when their is contact then updating and when no contact to update then adding contact\n    //TODO: set isUpdate value\n\n    // to handle the bug when the user visit again to add contact directly by visiting the link\n    dispatch({\n      type: CONTACT_TO_UPDATE,\n      payload: null,\n      key: null\n    });\n\n    // after adding/updating contact then sending to the contacts\n    // TODO :- also sending when their is any errors\n    history.push(\"/\");\n  };\n\n  // return the spinner when the image has been added in the storage\n  // showing the update / add contact based on the  state\n  return (\n    <Container fluid className=\"mt-5\">\n      <Row>\n        <Col md=\"6\" className=\"offset-md-3 p-2\">\n          <Form onSubmit={handleSubmit}>\n            <div className=\"text-center\">\n              {isUploading ? (\n                <Spinner type=\"grow\" color=\"primary\" />\n              ) : (\n                <div>\n                  <label htmlFor=\"imagepicker\" className=\"\">\n                    <img src={downloadUrl} alt=\"\" className=\"profile\" />\n                  </label>\n                  <input\n                    type=\"file\"\n                    name=\"image\"\n                    id=\"imagepicker\"\n                    accept=\"image/*\"\n                    multiple={false}\n                    onChange={e => imagePicker(e)}\n                    className=\"hidden\"\n                  />\n                </div>\n              )}\n            </div>\n\n            <FormGroup>\n              <Input\n                type=\"text\"\n                name=\"name\"\n                id=\"name\"\n                placeholder=\"Name\"\n                value={name}\n                onChange={e => setName(e.target.value)}\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"email\"\n                name=\"email\"\n                id=\"email\"\n                value={email}\n                onChange={e => setEmail(e.target.value)}\n                placeholder=\"Email\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"number\"\n                name=\"number\"\n                id=\"phonenumber\"\n                value={phoneNumber}\n                onChange={e => setPhoneNumber(e.target.value)}\n                placeholder=\"phone number\"\n              />\n            </FormGroup>\n            <FormGroup>\n              <Input\n                type=\"textarea\"\n                name=\"area\"\n                id=\"area\"\n                value={address}\n                onChange={e => setAddress(e.target.value)}\n                placeholder=\"address\"\n              />\n            </FormGroup>\n            <FormGroup check>\n              <Label check>\n                <Input\n                  type=\"checkbox\"\n                  onChange={() => {\n                    setStar(!star);\n                  }}\n                  checked={star}\n                />{\" \"}\n                <span className=\"text-right\">Mark as Star</span>\n              </Label>\n            </FormGroup>\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              block\n              className=\"text-uppercase\"\n            >\n              {isUpdate ? \"Update Contact\" : \"Add Contact\"}\n            </Button>\n          </Form>\n        </Col>\n      </Row>\n    </Container>\n  );\n};\n\nexport default AddContact;\n"]},"metadata":{},"sourceType":"module"}