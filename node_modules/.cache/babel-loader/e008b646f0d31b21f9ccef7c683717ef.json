{"ast":null,"code":"//TODO: create contact using all actions\nimport { act } from \"react-dom/test-utils\";\nimport { SET_CONTACT, SET_LOADING, CONTACT_TO_UPDATE, SET_SINGLE_CONTACT } from \"./action.types\"; //TODO: DONE use switch case\n\nexport default ((state, action) => {\n  switch (action.type) {\n    case SET_CONTACT:\n      return action.payload == null ? { ...state,\n        contacts: []\n      } : { ...state,\n        contacts: action.payload\n      };\n\n    case SET_LOADING:\n      return { ...state,\n        isLoading: action.payload\n      };\n\n    case CONTACT_TO_UPDATE:\n      return { ...state,\n        contactToUpdate: action.payload,\n        contactToUpdateKey: action.key\n      };\n\n    case SET_SINGLE_CONTACT:\n      return { ...state,\n        contact: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/BIKI PC/Downloads/attachment_01_A_challenge_application_lyst4695/src/context/reducer.js"],"names":["act","SET_CONTACT","SET_LOADING","CONTACT_TO_UPDATE","SET_SINGLE_CONTACT","state","action","type","payload","contacts","isLoading","contactToUpdate","contactToUpdateKey","key","contact"],"mappings":"AAAA;AAEA,SAASA,GAAT,QAAoB,sBAApB;AACA,SACEC,WADF,EAEEC,WAFF,EAGEC,iBAHF,EAIEC,kBAJF,QAKO,gBALP,C,CAOA;;AACA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,WAAL;AACE,aAAOK,MAAM,CAACE,OAAP,IAAkB,IAAlB,GACH,EAAE,GAAGH,KAAL;AAAYI,QAAAA,QAAQ,EAAE;AAAtB,OADG,GAEH,EAAE,GAAGJ,KAAL;AAAYI,QAAAA,QAAQ,EAAEH,MAAM,CAACE;AAA7B,OAFJ;;AAGF,SAAKN,WAAL;AACE,aAAO,EAAE,GAAGG,KAAL;AAAYK,QAAAA,SAAS,EAAEJ,MAAM,CAACE;AAA9B,OAAP;;AACF,SAAKL,iBAAL;AACE,aAAO,EACL,GAAGE,KADE;AAELM,QAAAA,eAAe,EAAEL,MAAM,CAACE,OAFnB;AAGLI,QAAAA,kBAAkB,EAAEN,MAAM,CAACO;AAHtB,OAAP;;AAKF,SAAKT,kBAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELS,QAAAA,OAAO,EAAER,MAAM,CAACE;AAFX,OAAP;;AAKF;AACE,aAAOH,KAAP;AApBJ;AAsBD,CAvBD","sourcesContent":["//TODO: create contact using all actions\n\nimport { act } from \"react-dom/test-utils\";\nimport {\n  SET_CONTACT,\n  SET_LOADING,\n  CONTACT_TO_UPDATE,\n  SET_SINGLE_CONTACT\n} from \"./action.types\";\n\n//TODO: DONE use switch case\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_CONTACT:\n      return action.payload == null\n        ? { ...state, contacts: [] }\n        : { ...state, contacts: action.payload };\n    case SET_LOADING:\n      return { ...state, isLoading: action.payload };\n    case CONTACT_TO_UPDATE:\n      return {\n        ...state,\n        contactToUpdate: action.payload,\n        contactToUpdateKey: action.key\n      };\n    case SET_SINGLE_CONTACT:\n      return {\n        ...state,\n        contact: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}