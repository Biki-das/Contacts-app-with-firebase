{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\BIKI PC\\\\Downloads\\\\attachment_01_A_challenge_application_lyst4695\\\\src\\\\App.js\";\nimport React, { useReducer, useEffect } from \"react\";\nimport { Container, Col, Row } from \"reactstrap\"; // react-router-dom3\n\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\"; // react toastify stuffs\n\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\"; // bootstrap css\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\"; // firebase stuffs\n//TODO: import firebase config and firebase database\n\nimport { firebaseConfig } from './utils/config';\nimport firebase from 'firebase/app';\nimport \"firebase/database\";\nimport \"firebase/storage\"; // components\n\nimport AddContact from \"./pages/AddContact\";\nimport Contacts from \"./pages/Contacts\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\nimport ViewContact from \"./pages/ViewContact\";\nimport PageNotFound from \"./pages/PageNotFound\"; // context api stuffs\n//TODO: import reducers and contexts\n\nimport reducer from \"./context/reducer\";\nimport { ContactContext } from './context/Context';\nimport { SET_CONTACT, SET_LOADING } from './context/action.types'; //initlizeing firebase app with the firebase config which are in ./utils/firebaseConfig\n//TODO: initialize FIREBASE\n\nfirebase.initializeApp(firebaseConfig); // first state to provide in react reducer\n\nconst initialState = {\n  contacts: [],\n  contact: {},\n  contactToUpdate: null,\n  contactToUpdateKey: null,\n  isLoading: false\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState); // will get contacts from firebase and set it on state contacts array\n\n  const getContacts = async () => {\n    // TODO: load existing data\n    dispatch({\n      type: SET_LOADING,\n      payload: true\n    });\n    const contactsRef = await firebase.database().ref('/contacts');\n    contactsRef.on('value', snapshot => {\n      dispatch({\n        type: SET_CONTACT,\n        payload: snapshot.val()\n      });\n      dispatch({\n        type: SET_LOADING,\n        payload: false\n      });\n    });\n  }; // getting contact  when component did mount\n\n\n  useEffect(() => {\n    //FIXME: call methods if needed\n    getContacts();\n  }, []);\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(ContactContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(ToastContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Header, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Switch, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/contact/add\",\n    component: AddContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/contact/view\",\n    component: ViewContact,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"/\",\n    component: Contacts,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    exact: true,\n    path: \"*\",\n    component: PageNotFound,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }\n  }))), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/BIKI PC/Downloads/attachment_01_A_challenge_application_lyst4695/src/App.js"],"names":["React","useReducer","useEffect","Container","Col","Row","BrowserRouter","Router","Switch","Route","Link","ToastContainer","toast","firebaseConfig","firebase","AddContact","Contacts","Header","Footer","ViewContact","PageNotFound","reducer","ContactContext","SET_CONTACT","SET_LOADING","initializeApp","initialState","contacts","contact","contactToUpdate","contactToUpdateKey","isLoading","App","state","dispatch","getContacts","type","payload","contactsRef","database","ref","on","snapshot","val"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from \"react\";\n\nimport { Container, Col, Row } from \"reactstrap\";\n\n// react-router-dom3\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\n// react toastify stuffs\nimport { ToastContainer, toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\n\n// bootstrap css\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n// firebase stuffs\n//TODO: import firebase config and firebase database\nimport {firebaseConfig} from './utils/config'\nimport firebase from 'firebase/app'\nimport \"firebase/database\"\nimport  \"firebase/storage\"\n\n\n\n// components\nimport AddContact from \"./pages/AddContact\";\nimport Contacts from \"./pages/Contacts\";\nimport Header from \"./layout/Header\";\nimport Footer from \"./layout/Footer\";\nimport ViewContact from \"./pages/ViewContact\";\nimport PageNotFound from \"./pages/PageNotFound\";\n\n// context api stuffs\n//TODO: import reducers and contexts\nimport reducer from \"./context/reducer\"\nimport {ContactContext} from './context/Context'\nimport {SET_CONTACT,SET_LOADING} from './context/action.types'\n\n\n\n\n\n//initlizeing firebase app with the firebase config which are in ./utils/firebaseConfig\n//TODO: initialize FIREBASE\nfirebase.initializeApp(firebaseConfig)\n// first state to provide in react reducer\nconst initialState = {\n  contacts: [],\n  contact: {},\n  contactToUpdate: null,\n  contactToUpdateKey: null,\n  isLoading: false\n};\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  // will get contacts from firebase and set it on state contacts array\n  const getContacts = async () => {\n    // TODO: load existing data\n    dispatch({\n      type:SET_LOADING,\n      payload: true,\n    })\n\n  const contactsRef = await firebase.database().ref('/contacts')\n  contactsRef.on('value', snapshot => {\n    dispatch({\n      type: SET_CONTACT,\n      payload: snapshot.val()\n\n\n    })\n    dispatch({\n      type: SET_LOADING,\n      payload : false\n      \n    })\n  })\n\n\n\n  };\n\n  // getting contact  when component did mount\n  useEffect(() => {\n    //FIXME: call methods if needed\n    getContacts()\n  }, []);\n\n  return (\n    <Router>\n      {/* FIXME: Provider is not configured */}\n      <ContactContext.Provider \n      value={{state,dispatch}}\n      \n      >\n        <ToastContainer />\n        <Header />\n        <Container>\n          <Switch>\n            <Route exact path=\"/contact/add\" component={AddContact} />\n            <Route exact path=\"/contact/view\" component={ViewContact} />\n            <Route exact path=\"/\" component={Contacts} />\n            <Route exact path=\"*\" component={PageNotFound} />\n          </Switch>\n        </Container>\n\n        <Footer />\n      </ContactContext.Provider>\n    </Router>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}